{"version":3,"file":"static/js/824.2ff121a6.chunk.js","mappings":"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","sources":["components/TransactionsList/Shorter.js","components/TransactionsList/TransactionsItemsStyled.jsx","components/TransactionsList/TransactionsItems.jsx","components/TransactionsMessage/TransactionsMessageStyled.jsx","components/TransactionsMessage/TransactionsMessage.jsx","components/TransactionsList/TransactionsListStyled.jsx","components/TransactionsList/TransactionsList.jsx","components/TransactionsSearchTools/TransactionsSearchToolsStyled.jsx","components/TransactionsSearchTools/TransactionsSearchTools.jsx","pages/TransactionHistoryPage/TransactionHistoryPageStyled.jsx","pages/TransactionHistoryPage/TransactionHistoryPage.jsx"],"sourcesContent":["export const Shorter = (str, windowSize) => {\n  let word = 20;\n  if (windowSize < 1440) {\n    word = 6;\n  }\n\n  if (str.length > word) {\n    return `${str.slice(0, word)}...`;\n  }\n  return str;\n};\n\nexport const ShorterDate = (str, windowSize) => {\n  if (windowSize < 1440) {\n    return `${str.slice(0, 5)}...`;\n  }\n  if (windowSize >= 1440) {\n    return `${str.slice(0, 14)}`;\n  }\n};\n","import styled from 'styled-components';\nimport { Icon } from '../Icon/Icon';\n\nexport const Tr = styled.ul`\n  width: 100%;\n  display: inline-flex;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const Td = styled.li`\n  letter-spacing: 1px;\n  display: flex;\n  align-items: center;\n  padding: 0;\n  margin: 0;\n  width: ${({ width }) => width || 'auto'};\n`;\n\nexport const BtnContainer = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const BtnTable = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 40px;\n  padding: 14px 20px;\n  font-weight: 400;\n  font-size: 16px;\n  color: var(--background-color);\n  background-color: var(--button-color);\n  transition: all var(--transition-delay) var(--transition);\n  outline: none;\n  gap: 8px;\n\n  &:hover,\n  &:focus {\n    background-color: var(--hover-color);\n  }\n`;\n\nexport const BtnTableDel = styled(BtnTable)`\n  background: var(--background-color);\n  color: var(--main-text-color);\n  border: 1px solid var(--background-color);\n\n  &:hover,\n  &:focus {\n    border: 1px solid var(--hover-color);\n    background-color: var(--hover-color);\n    color: var(--hover-text-color);\n  }\n`;\n\nexport const IconEdit = styled(Icon)`\n  stroke: var(--background-color);\n  fill: none;\n`;\n\nexport const IconDelete = styled(Icon)`\n  stroke: var(--main-text-color);\n  fill: none;\n`;\n\nexport const TextEdit = styled.span`\n  font-size: 16px;\n  color: var(--background-color);\n`;\n\nexport const TextCont = styled.span`\n  font-size: 16px;\n  color: var(--main-text-color);\n`;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Shorter, ShorterDate } from './Shorter';\nimport {\n  deleteTransaction,\n  getTransactions,\n} from '../../redux/Transaction/operations';\nimport { fetchCurrentUser } from '../../redux/User/operations';\nimport { selectCurrency } from '../../redux/User/userSlice';\nimport { useParams } from 'react-router-dom';\nimport {\n  Tr,\n  Td,\n  BtnContainer,\n  BtnTable,\n  BtnTableDel,\n  IconEdit,\n  IconDelete,\n  TextEdit,\n  TextCont,\n} from './TransactionsItemsStyled';\n\nexport const TransactionsItem = ({ item, handleOpenModal }) => {\n  const [windowSize, setWindowSize] = useState(window.innerWidth);\n  const { transactionsType } = useParams();\n\n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize(window.innerWidth);\n    }\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  const dispatch = useDispatch();\n\n  const handleDeleteTransaction = id => {\n    dispatch(deleteTransaction(id))\n      .unwrap()\n      .then(() => {\n        dispatch(fetchCurrentUser());\n        dispatch(getTransactions({ type: transactionsType }));\n        toast.success('Transaction deleted successfully');\n      })\n      .catch(error => toast.error('Something went wrong!'));\n  };\n\n  const convertDate = dateString => {\n    const dateObj = new Date(dateString);\n    const days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];\n    const dayOfWeek = days[dateObj.getDay()];\n    const day = dateObj.getDate();\n    const month = dateObj.getMonth() + 1;\n    const year = dateObj.getFullYear();\n    const formattedDate = `${dayOfWeek}, ${\n      day[0] === '0' ? day.substring(1) : day\n    }.${month.toString().padStart(2, '0')}.${year}`;\n    return formattedDate;\n  };\n\n  const currency = useSelector(selectCurrency);\n\n  return (\n    <Tr key={item._id}>\n      <Td width=\"18%\">{Shorter(item.category.categoryName, windowSize)}</Td>\n      <Td width=\"15%\">{Shorter(item.comment, windowSize)}</Td>\n      <Td width=\"15%\">{ShorterDate(convertDate(item.date), windowSize)}</Td>\n      <Td width=\"12%\">{item.time}</Td>\n      <Td width=\"18%\">\n        {item.sum} / {currency.toUpperCase()}\n      </Td>\n      <Td width=\"20%\">\n        <BtnContainer>\n          <BtnTable onClick={() => handleOpenModal(item)}>\n            <IconEdit name=\"edit\" size=\"16\" />\n            <TextEdit>Edit</TextEdit>\n          </BtnTable>\n          <BtnTableDel onClick={() => handleDeleteTransaction(item._id)}>\n            <IconDelete name=\"trash-bin\" size=\"16\" />\n            <TextCont>\n              <span>Delete</span>\n            </TextCont>\n          </BtnTableDel>\n        </BtnContainer>\n      </Td>\n    </Tr>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  margin: auto auto auto 32px;\n  text-align: left;\n  font-weight: 400;\n  font-size: 32px;\n  letter-spacing: -0.02em;\n  color: var(--main-text-color);\n\n  @media only screen and (min-width: 375px) {\n    margin-left: 64px;\n  }\n\n  @media only screen and (min-width: 768px) {\n    margin: auto;\n  }\n`;\n","import React from 'react';\nimport { Message } from './TransactionsMessageStyled';\n\nexport const TransactionsMessage = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n","import styled from 'styled-components';\n\nexport const ContainerTable = styled.div`\n  overflow-x: auto;\n  border-bottom-left-radius: 30px;\n  border-bottom-right-radius: 30px;\n`;\n\nexport const ListTable = styled.div`\n  width: 100%;\n`;\n\nexport const Thead = styled.div`\n  height: 59px;\n  background: rgba(0, 0, 0, 0.2);\n`;\n\nexport const Tbody = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  font-weight: 400;\n  font-size: 14px;\n  color: #fafafa;\n  text-align: left;\n  background: #171719;\n  height: 313px;\n  overflow: auto;\n  border-bottom-left-radius: 30px;\n  border-bottom-right-radius: 30px;\n\n  @media only screen and (min-width: 768px) {\n    height: 387px;\n    font-size: 18px;\n    gap: 31px;\n  }\n\n  @media only screen and (min-width: 1440px) {\n    height: 287px;\n    gap: 10px;\n  }\n`;\n\nexport const Tr = styled.div`\n  width: 100%;\n  display: flex;\n`;\n\nexport const Th = styled.div`\n  font-weight: 400;\n  font-size: 12px;\n  color: rgba(250, 250, 250, 0.4);\n  text-align: left;\n  padding: 20px 0;\n  width: ${({ width }) => width || 'auto'};\n\n  padding-left: ${({ $pl }) => $pl || '0'};\n`;\n\nexport const Td = styled.div`\n  letter-spacing: 1px;\n  padding-top: 20px;\n\n  padding-left: ${({ $pl }) => $pl || '0'};\n  padding-right: ${({ $pr }) => $pr || '0'};\n\n  width: ${({ width }) => width || 'auto'};\n`;\n\nexport const NoResults = styled.div`\n  text-align: center;\n  color: #fafafa;\n  padding: 20px;\n`;\n\nexport const Scrollable = styled.div`\n  overflow-x: auto;\n\n  &.scrollB {\n    overflow-x: auto;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { useParams } from 'react-router-dom';\n\nimport { TransactionsItem } from './TransactionsItems';\nimport { selectFilter } from '../../redux/Filter/filterSlice';\nimport {\n  editTransaction,\n  getTransactions,\n} from '../../redux/Transaction/operations';\nimport { selectTransactions } from '../../redux/Transaction/transactionSlice';\nimport { useModal } from '../../hooks/useModal';\nimport { fetchCurrentUser } from '../../redux/User/operations';\nimport { Modal, TransactionForm } from '../../components';\nimport { TransactionsMessage } from '../../components/TransactionsMessage/TransactionsMessage';\nimport {\n  ContainerTable,\n  ListTable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  NoResults,\n  Scrollable,\n} from './TransactionsListStyled';\n\nexport const TransactionsList = () => {\n  const { transactionsType } = useParams();\n  const dispatch = useDispatch();\n  const transactions = useSelector(selectTransactions);\n\n  const onSubmitForm = transaction => {\n    dispatch(editTransaction(transaction))\n      .unwrap()\n      .then(() => {\n        dispatch(fetchCurrentUser());\n        dispatch(getTransactions({ type: transactionsType }));\n        toast.success('Transaction edited successfully!');\n        toggleEditTransaction();\n      })\n      .catch(error => {\n        toast.error('Something went wrong!');\n      });\n  };\n\n  const [isOpenEditTransaction, toggleEditTransaction] = useModal();\n\n  const filter = useSelector(selectFilter);\n  const getFilterValue = () => {\n    return transactions.filter(\n      item =>\n        item.category.categoryName\n          .toLowerCase()\n          .includes(filter.toLowerCase()) ||\n        item.comment.toLowerCase().includes(filter.toLowerCase()) ||\n        item.date.includes(filter) ||\n        item.time.includes(filter) ||\n        item.sum.toString().includes(filter)\n    );\n  };\n  const filterItems = getFilterValue();\n\n  const [currentItem, setCurrentItem] = useState({});\n\n  const handleOpenModal = item => {\n    setCurrentItem(item);\n    toggleEditTransaction();\n  };\n\n  return (\n    <ContainerTable>\n      <Scrollable className=\"scroll scrollB\">\n        <ListTable>\n          <Thead>\n            <Tr>\n              <Th width=\"18%\" $pl=\"20px\">\n                Category\n              </Th>\n              <Th width=\"16%\" $pl=\"5px\">\n                Comment\n              </Th>\n              <Th width=\"15%\" $pl=\"2px\">\n                Date\n              </Th>\n              <Th width=\"10%\">Time</Th>\n              <Th width=\"20%\" $pl=\"13px\">\n                Sum\n              </Th>\n              <Th width=\"19%\" $pl=\"3px\">\n                Actions\n              </Th>\n            </Tr>\n          </Thead>\n          <Tbody className=\"scroll scrollB\">\n            {transactions.length === 0 && (\n              <NoResults>\n                <TransactionsMessage\n                  message={`Transaction ${transactionsType} list is empty!`}\n                />\n              </NoResults>\n            )}\n            {filterItems.length !== 0 &&\n              filterItems.map(item => (\n                <TransactionsItem\n                  key={item._id}\n                  item={item}\n                  handleOpenModal={handleOpenModal}\n                />\n              ))}\n            {filter &&\n              filterItems.length === 0 &&\n              transactions.length !== 0 && (\n                <NoResults>\n                  <TransactionsMessage message=\"Nothing found by filter!\" />\n                </NoResults>\n              )}\n          </Tbody>\n        </ListTable>\n      </Scrollable>\n      {isOpenEditTransaction && (\n        <Modal toggleModal={toggleEditTransaction}>\n          <TransactionForm\n            transaction={currentItem}\n            onSubmitForm={onSubmitForm}\n          />\n        </Modal>\n      )}\n    </ContainerTable>\n  );\n};\n","import styled from 'styled-components';\nimport DatePicker from 'react-datepicker';\n\nexport const FormContainer = styled.div`\n  width: 100%;\n  height: auto;\n  background-color: #171719;\n  border-top-right-radius: 30px;\n  border-top-left-radius: 30px;\n  padding: 20px;\n\n  @media only screen and (min-width: 768px) {\n    display: flex;\n    flex-direction: row;\n    padding: 32px 32px 16px 32px;\n  }\n\n  @media only screen and (min-width: 1440px) {\n    height: 90px;\n    padding: 20px 40px 16px 40px;\n  }\n`;\n\nexport const FormBox = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  @media only screen and (min-width: 768px) {\n    flex-direction: row;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 20px;\n  }\n`;\n\nexport const FilterContainer = styled.div`\n  position: relative;\n`;\n\nexport const FormInput = styled.input`\n  border-radius: 30px;\n  padding: 15px 30px;\n  width: 100%;\n  height: 50px;\n  border: 1px solid var(--background-color);\n  background: var(--background-color);\n\n  font-family: 'SuisseIntl-Regular', sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  letter-spacing: -0.02em;\n  color: rgba(250, 250, 250, 0.4);\n  outline: none;\n\n  &:hover,\n  &:focus {\n    border: 1px solid var(--button-color);\n  }\n\n  @media only screen and (min-width: 768px) {\n    width: 254px;\n    background: #0c0d0d;\n  }\n`;\n\nexport const DatePickerContainer = styled.div`\n  position: relative;\n`;\n\nexport const FormCalendar = styled(DatePicker)`\n  border: 1px solid rgba(250, 250, 250, 0.2);\n  border-radius: 30px;\n  padding: 15px 30px;\n  width: 100%;\n  height: 50px;\n  background: #171719;\n  color: rgba(250, 250, 250, 0.4);\n\n  font-family: 'SuisseIntl-Regular', sans-serif;\n  font-weight: 400;\n  font-size: 16px;\n  letter-spacing: -0.02em;\n  outline: none;\n  transition: 200ms cubic-bezier(0.075, 0.82, 0.165, 1);\n\n  &:hover,\n  &:focus {\n    border-color: var(--button-color);\n  }\n\n  @media only screen and (min-width: 768px) {\n    width: 183px;\n  }\n`;\n\nexport const IconSearch = styled.div`\n  stroke: var(--button-color);\n  fill: none;\n  position: absolute;\n  right: 10%;\n  top: 25%;\n  transform: translate(-40%, 10%);\n`;\n\nexport const IconDate = styled.div`\n  stroke: var(--button-color);\n  fill: none;\n  position: absolute;\n  right: 10%;\n  top: 25%;\n  transform: translate(-40%, 10%);\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { format } from 'date-fns';\n\nimport {\n  changeDate,\n  changeFilter,\n  resetFilter,\n  selectDate,\n  selectFilter,\n} from '../../redux/Filter/filterSlice';\n\nimport { Icon } from '../../components/Icon/Icon';\nimport { UniversalButton } from '../../components/UniversalButton/UniversalButton';\nimport {\n  FormContainer,\n  FormBox,\n  FilterContainer,\n  FormInput,\n  DatePickerContainer,\n  FormCalendar,\n  IconSearch,\n  IconDate,\n} from './TransactionsSearchToolsStyled';\nimport { GlobalStyle } from '../TransactionForm/DatePickerStyles';\n\nexport const TransactionsSearchTools = ({ handleOpenModal, type }) => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const changeFilterValue = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  useEffect(() => {\n    dispatch(resetFilter());\n  }, [type, dispatch]);\n\n  const date = useSelector(selectDate);\n  const changeDateValue = e => {\n    if (!e) {\n      dispatch(changeDate(format(new Date(), 'yyyy-MM-dd')));\n      return;\n    }\n    dispatch(changeDate(format(e, 'yyyy-MM-dd')));\n  };\n\n  const handleResetFilter = () => {\n    dispatch(resetFilter());\n  };\n\n  return (\n    <FormContainer>\n      <FormBox>\n        <FilterContainer>\n          <FormInput\n            value={filter}\n            onChange={changeFilterValue}\n            type=\"text\"\n            placeholder=\"Search for anything..\"\n          />\n          <IconSearch>\n            <Icon name=\"search\" size=\"20\" />\n          </IconSearch>\n        </FilterContainer>\n        <GlobalStyle />\n        <DatePickerContainer>\n          <FormCalendar\n            selected={date}\n            onChange={changeDateValue}\n            showPopperArrow={false}\n            maxDate={new Date()}\n            placeholderText=\"dd/mm/yyyy\"\n          />\n          <IconDate>\n            <Icon name=\"calendar\" size=\"20\" />\n          </IconDate>\n        </DatePickerContainer>\n        <UniversalButton action={handleResetFilter} type=\"reset\" />\n        <UniversalButton action={handleOpenModal} className=\"addBtn\" />\n      </FormBox>\n    </FormContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const TransactionHistoryContainer = styled.div`\n  position: relative;\n  min-width: 320px;\n  max-width: 375px;\n  padding: 0 20px 80px 20px;\n  margin: 0 auto;\n\n  @media only screen and (min-width: 768px) {\n    max-width: 768px;\n    padding: 0 32px 32px 32px;\n  }\n\n  @media only screen and (min-width: 1440px) {\n    max-width: 1440px;\n    padding: 0 100px 50px 100px;\n  }\n`;\n\nexport const TextContainer = styled.div`\n  max-width: 100%;\n  margin-bottom: 40px;\n\n  @media only screen and (min-width: 768px) {\n    max-width: 560px;\n  }\n\n  @media only screen and (min-width: 1440px) {\n    max-width: 492px;\n    margin-bottom: 64px;\n  }\n`;\n\nexport const HistoryTitle = styled.h2`\n  font-weight: 400;\n  font-size: 32px;\n  letter-spacing: -0.02em;\n  color: var(--main-text-color);\n\n  @media only screen and (min-width: 768px) {\n    font-size: 38px;\n  }\n`;\n\nexport const HistoryText = styled.p`\n  margin-top: 20px;\n  font-weight: 400;\n  font-size: 14px;\n  letter-spacing: -0.02em;\n  color: var(--regular-text-color);\n\n  @media only screen and (min-width: 768px) {\n    margin-top: 15px;\n    font-size: 16px;\n  }\n`;\n\nexport const HistoryAmount = styled.div`\n  width: 100%;\n  margin: 40px 0;\n\n  @media only screen and (min-width: 1440px) {\n    margin: 0;\n    position: absolute;\n    width: 630px;\n    fill: none;\n    left: 67%;\n    top: -1%;\n    transform: translate(-40%, 10%);\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { TransactionsList } from '../../components/TransactionsList/TransactionsList';\nimport { TransactionsSearchTools } from '../../components/TransactionsSearchTools/TransactionsSearchTools';\nimport {\n  Modal,\n  TransactionForm,\n  TransactionsTotalAmount,\n} from '../../components';\nimport {\n  selectTotalTransExpenses,\n  selectTotalTransIncomes,\n} from '../../redux/Transaction/transactionSlice';\nimport {\n  addTransaction,\n  getTransactions,\n} from '../../redux/Transaction/operations';\nimport { resetFilter, selectDate } from '../../redux/Filter/filterSlice';\nimport { useModal } from '../../hooks/useModal';\nimport { fetchCurrentUser } from '../../redux/User/operations';\nimport {\n  TransactionHistoryContainer,\n  TextContainer,\n  HistoryTitle,\n  HistoryText,\n  HistoryAmount,\n} from './TransactionHistoryPageStyled';\n\nconst TransactionsHistoryPage = () => {\n  const { transactionsType } = useParams();\n  const totalExpenses = useSelector(selectTotalTransExpenses);\n  const totalIncomes = useSelector(selectTotalTransIncomes);\n\n  const onSubmitForm = transaction => {\n    dispatch(addTransaction(transaction))\n      .unwrap()\n      .then(() => {\n        dispatch(fetchCurrentUser());\n        dispatch(getTransactions({ type: transactionsType }));\n        toggleIsAddModal();\n        toast.success('Transaction added successfully!');\n        dispatch(resetFilter());\n      })\n      .catch(error => {\n        toast.error('Something went wrong!');\n      });\n  };\n\n  const dispatch = useDispatch();\n  const filterDate = useSelector(selectDate);\n\n  let text = 'All Expense';\n  let description =\n    'View and manage every transaction seamlessly! Your entire financial landscape, all in one place.';\n  if (transactionsType === 'incomes') {\n    text = 'All incomes';\n    description =\n      'Track and celebrate every bit of earnings effortlessly! Gain insights into your total revenue in a snap.';\n  }\n\n  useEffect(() => {\n    if (filterDate) {\n      dispatch(getTransactions({ type: transactionsType, date: filterDate }));\n    } else {\n      dispatch(getTransactions({ type: transactionsType }));\n    }\n  }, [filterDate, dispatch, transactionsType]);\n\n  const [isAddModal, toggleIsAddModal] = useModal();\n\n  return (\n    <TransactionHistoryContainer>\n      <TextContainer>\n        <HistoryTitle>{text}</HistoryTitle>\n        <HistoryText>{description}</HistoryText>\n      </TextContainer>\n      <HistoryAmount>\n        <TransactionsTotalAmount\n          totalAllExpenses={totalExpenses}\n          totalAllIncomes={totalIncomes}\n        />\n      </HistoryAmount>\n      <TransactionsSearchTools\n        handleOpenModal={toggleIsAddModal}\n        type={transactionsType}\n      />\n      <TransactionsList />\n      {isAddModal && (\n        <Modal toggleModal={toggleIsAddModal}>\n          <TransactionForm\n            onSubmitForm={onSubmitForm}\n            transactionsType={transactionsType}\n            history={transactionsType}\n          />\n        </Modal>\n      )}\n    </TransactionHistoryContainer>\n  );\n};\n\nexport default TransactionsHistoryPage;\n"],"names":["Shorter","str","windowSize","word","length","concat","slice","ShorterDate","Tr","styled","_templateObject","_taggedTemplateLiteral","Td","_templateObject2","_ref","width","BtnContainer","_templateObject3","BtnTable","_templateObject4","BtnTableDel","_templateObject5","IconEdit","Icon","_templateObject6","IconDelete","_templateObject7","TextEdit","_templateObject8","TextCont","_templateObject9","TransactionsItem","item","handleOpenModal","_useState","useState","window","innerWidth","_useState2","_slicedToArray","setWindowSize","transactionsType","useParams","useEffect","handleWindowResize","addEventListener","removeEventListener","dispatch","useDispatch","currency","useSelector","selectCurrency","_jsxs","children","_jsx","category","categoryName","comment","dateString","dateObj","Date","dayOfWeek","getDay","day","getDate","month","getMonth","year","getFullYear","substring","toString","padStart","convertDate","date","time","sum","toUpperCase","onClick","name","size","id","_id","deleteTransaction","unwrap","then","fetchCurrentUser","getTransactions","type","toast","catch","error","Message","TransactionsMessage","message","ContainerTable","ListTable","Thead","Tbody","Th","_ref2","$pl","NoResults","_ref3","_ref4","$pr","_ref5","Scrollable","TransactionsList","transactions","selectTransactions","_useModal","useModal","_useModal2","isOpenEditTransaction","toggleEditTransaction","filter","selectFilter","filterItems","toLowerCase","includes","currentItem","setCurrentItem","className","map","Modal","toggleModal","TransactionForm","transaction","onSubmitForm","editTransaction","FormContainer","FormBox","FilterContainer","FormInput","DatePickerContainer","FormCalendar","DatePicker","IconSearch","IconDate","TransactionsSearchTools","resetFilter","selectDate","value","onChange","e","changeFilter","target","placeholder","GlobalStyle","selected","changeDate","format","showPopperArrow","maxDate","placeholderText","UniversalButton","action","TransactionHistoryContainer","TextContainer","HistoryTitle","HistoryText","HistoryAmount","totalExpenses","selectTotalTransExpenses","totalIncomes","selectTotalTransIncomes","filterDate","text","description","isAddModal","toggleIsAddModal","TransactionsTotalAmount","totalAllExpenses","totalAllIncomes","addTransaction","history"],"sourceRoot":""}